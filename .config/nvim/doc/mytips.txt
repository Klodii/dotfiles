*mytips.txt*    Help in which I write my tips and triks.

In the documentation we will write `Ctrl` in this way `^`.

UPPER-LOWER CASE                                      *mytips-upper-lower-case*
- Normal mode:
    - `~` change to upper/lower case the character under the cursor
    - |gu{movement}| to make lowercase all character found in the movement
    - |gU{movement}| to make uppercase all character found in the movement

OPEN URL OR FILES                                             *mytips-open-url*
- Normal mode: |gx| opens the current filepath or URL in your default application/browser
- Normal mode: |gf| edit the file whose name is under or after the cursor

MOVEMENTS                                                    *mytips-movements*
Visual mode: |0| goes to beginning of the line
Visual mode: |_| or |^| goes to first non-blank character of the line
Visual mode: |g_| goes to the last non-blank character of the line
Visual mode: `_vg_` will select from first non-blank character to last non-blank character

P
INDENTATION                                                *mytips-indentation*
Insert mode: `^t`, `^d` to indent current line forward, backwards
Visual mode: `>`, `<` to indent current line forward, backwards
Visual mode: `=` to make vim auto-indent correctly the selected rows

RECORD COMMANDS                                        *mytips-record-commands*
- Normal mode:
    - `q<a-z>` to begin recording all keys and commands executed.
          The recording goes to the <a-z> character selected (aka the
          alphanumeric register selected).
    - `@<a-z><movement>` to execute the recorded commands

REGISTERS                                                    *mytips-registers*
- To list all registers content: `:registers` or `:reg`
- The |"{register}| is used to interact with registers.
- To paste the content of a register X:
    - Normal mode: `"Xp`
    - Insert mode: `<^r>X`
- To yank to a specific register
  Prepend your yank command with the double quote |"| and the register name X:
    - Normal mode: `"Xyw` (to yank the word to the register X)

SELECT LAST SELECTED TEXT                    *mytips-select-last-selected-text*

Normal Mode
- |gv| Will select the last text that was selected

SPELL CHECKER                                            *mytips-spell-checker*
Normal mode:
    - |zg| Add word under the cursor as a good word
    - |zw| Add word under the cursor as a wrong (bad) word

COMMENT LINE                                              *mytips-comment-line*

Normal mode:
- |gcc| Comment/Uncomment the line of the cursor
- |gc{motion}| Comment/Uncomment the line covered by the |{motion}|

GET SETTING VALUE                                    *mytips-get-setting-value*
>
    :set <option>?
<
For example to show the value of the `textwidth` just type
>
    :set textwidth?

CHANGE BUFFER FILETYPE                                        *mytips-filetype*
A filetype will help nvim to highlight keywords of the given filetype.
>
    :setfiletype <type>
>
or
>
    :setf <type>
<

`<type>` can be python, markdown, sql, etc

You can also set the filetype directly in the file, by putting this line at
the top or bottom of the file
>
    vim:ft=<type>


FORMAT ONLY LONG LINES                                          *mytips-format*
In Vim, you may want to format long lines, that is, wrap long lines so the
longest is, say, 80 characters.

If the |textwidth| is not globally set, you can set it locally by typing `:setl tw=80`

Use |gq| to format the wanted lines.

HIGHLIGHT IN COMMENTS                               *mytips-highlight-comments*
To highlight groups in comments, like TODOs you have to install for treesitter
>
    :TSInstall comments
<

To list all highlight groups type: `:hi`, for more info `:h highlight`


DEV DEBUGGING                                               *mytips-debugging*
During development you might find useful to print log messages.
In this example you can see how to write them.

>lua
    local log = require "plenary.log":new()
    log.level = 'debug'
    local random_table = { message = 'This is a debug log' }
    log.debug(random_table)
<

To read them you just have to execute |:messages|.
It will display all the log messages, to check the latest messages you have to
go ad the end of them.

vim:tw=78:ts=8:ft=help:norl:
