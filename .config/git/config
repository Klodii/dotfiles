[alias]
    # If the alias expansion is prefixed with an exclamation point,
    # it will be treated as a shell command. Note that shell commands
    # will be executed from the top-level directory of a repository,
    # which may not necessarily be the current directory.

    whoami = config user.email # show the user email for the current repository.
    ll = "!func() { git log --oneline -n${1-15}; }; func" # list last 15 logs if no other value is passed
    last = log -1 HEAD  # show information about the lastest commit, similar to 'show' but without the diff
    pdiff = diff HEAD^ HEAD  # diff with previous commit
    d = diff
    dt = difftool
    st = status -sb
    c = commit
    ca = commit -a
    update = add -u  # stage modified and deleted files only, do not add untracked files (new files)
    amend = commit --amend --no-edit
    upend = !git update && git amend
    conflicts = !git diff --name-only --diff-filter=U # show list of files in a conflict state.
    date-graph = log --graph -10 --branches --remotes --tags  --format=format:'%Cgreen%h %Cresetâ€¢ %<(75,trunc)%s (%cN, %cr) %Cred%d' --date-order
    ignored = ls-files -ci --exclude-standard # list ignored files, ignored by .gitignore
    apply-gitignore = !git ignored -z | xargs -0 git rm --cached # remove files that are ignored but are already committed
    untracked = ls-files --others --exclude-standard
    rmu = !git clean -d # remove untracked files and directories, if clean.requireForce is not set to false, you have to add the -f flagg
    addu = !git untracked | xargs git add # add untracked files
    wy = whatchanged --since="yesterday"
    ri = "!func() { git rebase -i HEAD~$1; }; func" # interactive rebase with the given number of latest commits

    # taken from the ohmyzsh git plugin
    # added the '-e' flag to the commit command, which opens the editor
    # enabeling the user to add some usefull text
    # that might help the reader to understand what is missing to transform
    # the wip commit to a complete commit
    wip = "!git add -A; git rm $(git ls-files --deleted) 2> /dev/null; git commit --no-verify --no-gpg-sign --message '--wip-- [skip ci]' -e"


    zero = reset --hard HEAD # remove all staged or unstaged files, redo what you wanted to do, starting from zero (HEAD)
    undo = "!func() { git reset --mixed HEAD~$1; }; func" # undo the number of latest commits passed
    # reset the local branch in order to be in line with origin
    current-branch = branch --show-current
    blackhole = "!func() { \
        CURRENT_BRANCH=$(git current-branch); \
        git reset --hard origin/$CURRENT_BRANCH; \
        }; \
        func"


    # Make sure that the working directory is up to date with the origin.
    #
    # pull changes from remote, if there are any local commits, it'll rebase
    # them to come after the commits that are pulled down.
    # The `--prune` option removes remote-tracking branches that no longer
    # exists on the remote.
    # Usin the `!` prefix allows to use any command and not just git commands
    # in the alias, execute everything in the shell
    up = !git pull --rebase --prune $@ && git submodule update --init --recursive

    # retrive default branch [main/master]
    # symbolic-ref contains the local representation, of the default branch, *locally*.
    # For this reason, it may be out of date or unavailable. To update it run
    # `git remote set-head origin --auto`
    update-default = !git remote set-head origin --auto
    # In the sed command below we see `@` as a separator insted of the more
    # common `/`. It is done to avoid escapig the string
    # (refs\/remotes\/origin\/). Seed takes whatever follows the `s` as
    # the separator.
    default = !git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'

    # switch to the default branch
    # it is a common thing that I do before creating a new branch and pulling
    # all the changes.
    # The name of the default branch is not always the same in all the
    # repository, the this alias solve the problem
    go-default = !git switch $(git default)

    # current logs, show logs that are in the current branch but not in the
    # passed one ($1) or default if no branch is passed
    cl = "!func() { \
        DEFAULT=$(git default); \
        git log --no-merges --pretty='%C(yellow)%h%d %Creset%an %Cgreen%ar:%Creset %s' --graph ${1-$DEFAULT}..HEAD; \
        }; \
        func"

    # rebase branch
    # open the rebase editor with only the branch commits compared to $1
    # if not passed use DEFAULT
    # Ex: if opened a branch from the DEFAULT branch this command will open the
    # rebase editor with the new commit added, compared with DEFAULT
    #
    # This is usefull before creating a pull request you want to squash or reword some
    # commit.
    # The $1 is used when you want to rebase to a branch that is older to the
    # DEFAULT branch, where you opened the current branch.
    # For example it comes in handy after making a hotfix starting from DEFAULT but you
    # have to rebase it into master, so you have to remove all the commits that
    # are in DEFAULT and you don't want to put into master
    rb = "!func() { \
        DEFAULT=$(git default); \
        git ri $(git cl ${1-$DEFAULT}| wc -l); \
        }; \
        func"

    # summarise all the commits, subjects and body messages, that are in current
    # branch but not in the passed one ($1) or default if no branch is passed
    # the return message is usually copied and pasted in merge request
    # description.
    pr-summary = "!func() { \
        DEFAULT=$(git default); \
        git log --reverse --no-merges --format=format:'- %s (%h)%n%n%w(74,2,2)%b' ${1-$DEFAULT}..HEAD; \
        }; \
        func"

    # Deletes all branches merged into the specified branch (or the default branch if no branch is specified)
    bclean = "!func() { \
        DEFAULT=$(git default); \
        git branch --merged ${1-$DEFAULT} | grep -v " ${1-$DEFAULT}$" | xargs git branch -d; \
        }; \
        func"
    # Switches to specified branch (or the dafult branch if no branch is specified), runs git up, then runs bclean.
    bdone = "!func() { \
        DEFAULT=$(git default); \
        git checkout ${1-$DEFAULT} && git up && git bclean ${1-$DEFAULT}; \
        }; \
        func"


    # switch branch, if the branch name is not provided search it through fuzzy finder
    # DEPENDENCIES:
    #   - fzf
    sb = "!func() { \
        if [ $1 ]; \
        then \
            git switch $1; \
            exit $?; \
        else \
        FULL_BRANCH_NAME=$(git branch -a | fzf --height '90%' --header 'Choose the branch into swith' --reverse --border --ansi --preview-label='[Last diff]' --preview 'git show --color=always -1 {1}'); \
            BRANCH_NAME=$(echo $FULL_BRANCH_NAME | sed 's@remotes/origin/@@'); \
            git checkout $BRANCH_NAME; \
        fi \
        }; \
        func"

    # Choose which commit to cherry pick, from all branches
    fcherry = "!func() { \
        commit_hash=$(git log --pretty=format:'%h %s' --branches='*' \
        | fzf --height '90%' --header 'Which commit to cherry pick?' --reverse --border --ansi --preview-label='[Commit diff]' --preview 'git show --color=always {1}' \
        | awk '{print $1}'); \
        if [ -n "$commit" ]; \
        then \
            git cherry-pick $commit_hash; \
        fi \
        }; \
        func"
    # Choose which commit to revert
    frevert = "!func() { \
        commit_hash=$(git log --pretty=format:'%h %s' \
        | fzf --height '90%' --header 'Which commit to revert?' --reverse --border --ansi --preview-label='[Commit diff]' --preview 'git show --color=always {1}' \
        | awk '{print $1}'); \
        if [ -n "$commit" ]; \
        then \
            git revert $commit_hash; \
        fi \
        }; \
        func"


    # select the stash to apply
    # a stash name has this format:
    # "stash@{0}: WIP on main: commit message"
    # only the first part identifies the a shas: "stash@{0}", so we need to
    # extract it from the string.
    # for the fzf preview, we set has the delimiter ":" so in this case
    # we can access to the stash_id by selecting the first part of the parameter
    # selected by the user, with: {1} ({} will give all the string)
    #
    # After getting the stash string of our choice (full_stash) we perform
    # a bash string manipulation operation (%%:*) to remove the longest rear-anchored pattern
    fstash = "!func() { \
        full_stash=$(git stash list \
        | fzf --height '90%' --header 'Which stash to apply?' --reverse --border --ansi --delimiter : --preview-label='[Stash diff]' --preview 'git stash show -p --color=always {1}' \
        ); \
        stash_id=${full_stash%%:*}; \
        if [ -n "$stash_id" ]; \
        then \
            git stash apply $stash_id; \
        fi \
        }; \
        func"

    # grep only in the files in which I have worked on
    # search_in_worked_files -> swf
    swf = "!func() { \
        git grep $1 -- $(git log --name-status --author=$(git whoami) --pretty=format:'' | awk '{print $2}' | sort -u); \
        }; \
        func"
[core]
    editor = $EDITOR
    # Treat spaces before tabs and all kinds of trailing whitespace as an error
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space

    # Make `git rebase` safer on macOS
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false

    # Prevent showing files whose names contain non-ASCII symbols as unversioned.
    # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
    precomposeunicode = false

    # required https://github.com/dandavison/delta
    pager = delta

[delta]
    theme = GitHub
	syntax-theme = ansi
	navigate = true # use n and N to move between diff sections
	hyperlinks = true
	file-modified-label = MODIFIED:
	file-removed-label  = REMOVED:
	file-added-label    = ADDED:
	file-renamed-label  = RENAMED:
	features = labels
    line-numbers = true
    side-by-side = true

[interactive]
    # When an interactive command (such as git add --patch) shows a colorized
    # diff, git will pipe the diff through the shell command defined by this
    # configuration variable
    diffFilter = delta --color-only

[init]
    # requires Git 2.28 or later
    defaultBranch = main

[commit]
    verbose = true

[push]
    default = simple
    autoSetupRemote = true

[fetch]
    prune = true

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow
    frag = magenta # line info
    old = red strike # deletions
    new = green italic# additions
    withespace = red reverse
    commit = yellow

[color "status"]
    added = green
    changed = yellow
    untracked = red

[color "diff-hifhlight"]
    oldNormal = red strike
    oldHighlight = red strike 52
    newNormal = green italic
    newHighlight = green italic 22

[pager]
    show-branch = true
    status = true

[diff]
    # Detect copies as well as renames
    renames = copies
    algorithm = histogram
    tool = nvimdiff
    # Leged for nvimdiff
    # nvimdiff shortcuts:
    # :diffg RE - get from REMOTE
    # :diffg BA - get from BASE
    # :diffg LO - get from LOCAL
    # ]c - Jump to the next change.
    # [c - Jump to the previous change.
    # :cq - exit withou applying any editing

[difftool]
    prompt = false
    trustExitCode = true

[difftool "nvimdiff"]
    cmd = "nvim --cmd \":lua vim.g.noplugins=1\" -d \"$LOCAL\" \"$REMOTE\""

[merge]
    tool = nvimdiff
    # Include summaries of merged commits in newly created merge commit messages
    log = true
    conflictstyle = zdiff3

[mergetool]
    prompt = false
    trustExitCode = true
