[alias]
    # If the alias expansion is prefixed with an exclamation point,
    # it will be treated as a shell command. Note that shell commands
    # will be executed from the top-level directory of a repository,
    # which may not necessarily be the current directory.

    # retrive default branch [main/master]
    #
    # In the sed command below we see `@` as a separator insted of the more
    # common `/`. It is done to avoid escapig the string
    # (refs\/remotes\/origin\/). Seed takes whatever follows the `s` as
    # the separator.
    default = !git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'

    # current logs, show logs that are in the current branch but not in the default one
    cl = !git log --no-merges --pretty='%C(yellow)%h%d %Creset%an %Cgreen%ar:%Creset %s' --graph $(git default)..HEAD
    ll = log --oneline  # list logs
    last = log -1 HEAD  # show information about the lastest commit, similar to 'show' but without the diff
    pdiff = diff HEAD^ HEAD  # diff with previous commit
    dt = difftool
    st = status -sb
    ca = commit -a
    update = add -u  # Stage modified and deleted files only, do not add untracked files (new files)
    amend = commit --amend --no-edit
    conflicts = !git diff --name-only --diff-filter=U # Show list of files in a conflict state.
    date-graph = log --graph -10 --branches --remotes --tags  --format=format:'%Cgreen%h %Cresetâ€¢ %<(75,trunc)%s (%cN, %cr) %Cred%d' --date-order

    zero = reset --hard HEAD # Remove all staged or unstaged files, redo what you wanted to do, starting from zero (HEAD)
    undo = reset --mixed HEAD~1 # Undo last commit
    # Reset the local branch in order to be in line with origin
    current-branch = branch --show-current
    blackhole = "!func() { \
        CURRENT_BRANCH=$(git current-branch); \
        git reset --hard origin/$CURRENT_BRANCH; \
        }; \
        func"


    # Make sure that the working directory is up to date with the origin.
    #
    # pull changes from remote, if there are any local commits, it'll rebase
    # them to come after the commits that are pulled down.
    # The `--prune` option removes remote-tracking branches to no longer
    # exists on the remote.
    # Usin the `!` prefix allows to use any command and not just git commands
    # in the alias, execute everything in the shell
    up = !git pull --rebase --prune $@ && git submodule update --init --recursive

    # Deletes all branches merged into the specified branch (or the default branch if no branch is specified)
    bclean = "!func() { \
        DEFAULT=$(git default); \
        git branch --merged ${1-$DEFAULT} | grep -v " ${1-$DEFAULT}$" | xargs git branch -d; \
        }; \
        func"
    # Switches to specified branch (or the dafult branch if no branch is specified), runs git up, then runs bclean.
    bdone = "!func() { \
        DEFAULT=$(git default); \
        git checkout ${1-$DEFAULT} && git up && git bclean ${1-$DEFAULT}; \
        }; \
        func"


    # switch branch, if the branch name is not provided search it through fuzzy finder
    # DEPENDENCIES:
    #   - fzf
    sb = "!func() { \
        if [ $1 ]; \
        then \
            git switch $1; \
            exit $?; \
        else \
        FULL_BRANCH_NAME=$(git branch -a | fzf --height '90%' --header 'Choose the branch into swith' --reverse --border --ansi --preview-label='[Last diff]' --preview 'git show --color=always -1 {1}'); \
            BRANCH_NAME=$(echo $FULL_BRANCH_NAME | sed 's@remotes/origin/@@'); \
            git checkout $BRANCH_NAME; \
        fi \
        }; \
        func"

    # Choose which commit to cherry pick, from all branches
    fcherry = "!func() { \
        commit_hash=$(git log --pretty=format:'%h %s' --branches='*' \
        | fzf --height '90%' --header 'Which commit to cherry pick?' --reverse --border --ansi --preview-label='[Commit diff]' --preview 'git show --color=always {1}' \
        | awk '{print $1}'); \
        if [ -n "$commit" ]; \
        then \
            git cherry-pick $commit_hash; \
        fi \
        }; \
        func"

    # select the stash to apply
    # a stash name has this format:
    # "stash@{0}: WIP on main: commit message"
    # only the first part identifies the a shas: "stash@{0}", so we need to
    # extract it from the string.
    # for the fzf preview, we set has the delimiter ":" so in this case
    # we can access to the stash_id by selecting the first part of the parameter
    # selected by the user, with: {1} ({} will give all the string)
    #
    # After getting the stash string of our choice (full_stash) we perform
    # a bash string manipulation operation (%%:*) to remove the longest rear-anchored pattern
    sstash = "!func() { \
        full_stash=$(git stash list \
        | fzf --height '90%' --header 'Which stash to apply?' --reverse --border --ansi --delimiter : --preview-label='[Stash diff]' --preview 'git stash show -p --color=always {1}' \
        ); \
        stash_id=${full_stash%%:*}; \
        if [ -n "$stash_id" ]; \
        then \
            git stash apply $stash_id; \
        fi \
        }; \
        func"


[diff]
    tool = nvimdiff
    # Leged for nvimdiff
    # nvimdiff shortcuts:
    # :diffg RE - get from REMOTE
    # :diffg BA - get from BASE
    # :diffg LO - get from LOCAL
    # ]c - Jump to the next change.
    # [c - Jump to the previous change.
    # :cq - exit withou applying any editing
[difftool]
    prompt = false
[merge]
    tool = nvimdiff
[mergetool]
    prompt = false
