[alias]
    # If the alias expansion is prefixed with an exclamation point,
    # it will be treated as a shell command. Note that shell commands
    # will be executed from the top-level directory of a repository,
    # which may not necessarily be the current directory.

    ll = log --oneline  # list logs
    last = log -1 HEAD
    pdiff = diff HEAD^ HEAD  # diff with previous commit
    dt = difftool
    st = status -sb
    ca = commit -a

    zero = reset --hard HEAD # Remove all staged or unstaged files, redo what you wanted to do, starting from zero (HEAD)
    undo = reset --mixed HEAD~1 # Undo last commit
    # Reset the local branch in order to be in line with origin
    current-branch = branch --show-current
    blackhole = "!func() { \
        CURRENT_BRANCH=$(git current-branch); \
        git reset --hard origin/$CURRENT_BRANCH; \
        }; \
        func"

    amend = commit --amend --no-edit

    # Make sure that the working directory is up to date with the origin.
    #
    # pull changes from remote, if there are any local commits, it'll rebase
    # them to come after the commits that are pulled down.
    # The `--prune` option removes remote-tracking branches to no longer
    # exists on the remote.
    # Usin the `!` prefix allows to use any command and not just git commands
    # in the alias, execute everything in the shell
    up = !git pull --rebase --prune $@ && git submodule update --init --recursive

    # retrive default branch [main/master]
    #
    # In the sed command below we see `@` as a separator insted of the more
    # common `/`. It is done to avoid escapig the string
    # (refs\/remotes\/origin\/). Seed takes whatever follows the `s` as
    # the separator.
    default = !git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'
    # Deletes all branches merged into the specified branch (or the default branch if no branch is specified)
    bclean = "!func() { \
        DEFAULT=$(git default); \
        git branch --merged ${1-$DEFAULT} | grep -v " ${1-$DEFAULT}$" | xargs git branch -d; \
        }; \
        func"
    # Switches to specified branch (or the dafult branch if no branch is specified), runs git up, then runs bclean.
    bdone = "!func() { \
        DEFAULT=$(git default); \
        git checkout ${1-$DEFAULT} && git up && git bclean ${1-$DEFAULT}; \
        }; \
        func"

    # Show list of files in a conflict state.
    conflicts = !git diff --name-only --diff-filter=U

    date-graph = log --graph -10 --branches --remotes --tags  --format=format:'%Cgreen%h %Cresetâ€¢ %<(75,trunc)%s (%cN, %cr) %Cred%d' --date-order

    # switch branch, if the branch name is not provided search it through fuzzy finder
    # DEPENDENCIES:
    #   - fzf
    sb = "!func() { \
        if [ $1 ]; \
        then \
            git switch $1; \
            exit $?; \
        else \
            FULL_BRANCH_NAME=$(git branch -a | fzf); \
            BRANCH_NAME=$(echo $FULL_BRANCH_NAME | sed 's@remotes/origin/@@'); \
            git checkout $BRANCH_NAME; \
        fi \
        }; \
        func"
[diff]
	tool = vimdiff
[difftool]
	prompt = false
